{
    // Utility tools
    "signal": {
        "prefix": "signal",
        "body": "signal",
        "description": "Send a signal globally. This can wake up processes if there are any waiting on the same signal name. Examples of usage: local signal = \"\" or signal(string params)."
    },
    "waitSignal(string name)": {
        "prefix": "waitsignal",
        "body": "waitsignal()",
        "description": "Send a signal globally. This can wake up processes if there are any waiting on the same signal name."
    },
    "runProcess(function func)": {
        "prefix": "runProcess",
        "body": [
            "runProcess(function()",
            "    ${1}",
            "end)"
        ],
        "description": "Start a new process."
    },
    "killProcesses()": {
        "prefix": "killProcesses",
        "body": "killProcesses()",
        "description": "Stop and remove all processes."
    },
    "waitSeconds(float seconds)": {
        "prefix": "waitSeconds",
        "body": "waitSeconds(${1})",
        "description": "Wait until some time has passed (to be used from inside a process)."
    },
    "getprops(table object)": {
        "prefix": "getprops",
        "body": "getprops(${1})",
        "description": "Get reflection data from object."
    },
    "len(table object)": {
        "prefix": "len",
        "body": "len(${1})",
        "description": "Get the length of a table."
    },
    "backlog_post_list(table list)": {
        "prefix": "backlog_post_list",
        "body": "backlog_post_list(${1})",
        "description": "Post table contents to the backlog."
    },
    "fixedupdate()": {
        "prefix": "fixedupdate",
        "body": "fixedupdate()",
        "description": "Wait for a fixed update step to be called (to be used from inside a process)."
    },
    "update()": {
        "prefix": "update",
        "body": "update()",
        "description": "Wait for variable update step to be called (to be used from inside a process)."
    },
    "render()": {
        "prefix": "render",
        "body": "render()",
        "description": "Wait for a render step to be called (to be used from inside a process)."
    },
    "getDeltaTime()": {
        "prefix": "getDeltaTime",
        "body": "getDeltaTime()",
        "description": "Returns the delta time in seconds (time passed since previous update())."
    },
    "math.lerp(float a, b, t)": {
        "prefix": "math.lerp",
        "body": "math.lerp(${1})",
        "description": "Linear interpolation."
    },
    "math.clamp(float x, min, max)": {
        "prefix": "math.clamp",
        "body": "math.clamp(${1})",
        "description": "Clamp x between min and max."
    },
    "math.saturate(float x)": {
        "prefix": "math.saturate",
        "body": "math.saturate(${1})",
        "description": "Clamp x between 0 and 1."
    },
    "dobinaryfile(string filename)": {
        "prefix": "dobinaryfile",
        "body": "dobinaryfile(${1})",
        "description": "Executes a binary LUA file."
    },
    "compilebinaryfile(string filename_src, dilename_dst)": {
        "prefix": "compilebinaryfile",
        "body": "compilebinaryfile(${1})",
        "description": "Compiles a text LUA file (filename_src) into a binary LUA file (filename_dst)."
    },
    // Backlog
    "backlog_clear()": {
        "prefix": "backlog_clear",
        "body": "backlog_clear()",
        "description": "Remove all entries from the backlog."
    },
    "backlog_post(string params,,,)": {
        "prefix": "backlog_post",
        "body": "backlog_post(${1})",
        "description": "Post a string to the backlog."
    },
    "backlog_fontsize(int size)": {
        "prefix": "backlog_fontsize",
        "body": "backlog_fontsize(${1})",
        "description": "Modify the font size of the backlog."
    },
    "backlog_isactive()": {
        "prefix": "backlog_isactive",
        "body": "backlog_isactive()",
        "description": "Boolean result -- returns true if the backlog is active, false otherwise."
    },
    "backlog_fontrowspacing(float spacing)": {
        "prefix": "backlog_fontrowspacing",
        "body": "backlog_fontrowspacing(${1})",
        "description": "Set a row spacing to the backlog."
    },
    "backlog_lock()": {
        "prefix": "backlog_lock",
        "body": "backlog_lock()",
        "description": "Disable and lock the backlog so HOME key doesn't bring it up."
    },
    "backlog_unlock()": {
        "prefix": "backlog_unlock",
        "body": "backlog_unlock()",
        "description": "Unlock the backlog so it can be toggled with the HOME key."
    },
    "backlog_blocklua()": {
        "prefix": "backlog_blocklua",
        "body": "backlog_blocklua()",
        "description": "Disable LUA code execution in the backlog."
    },
    "backlog_unblocklua()": {
        "prefix": "backlog_unblocklua",
        "body": "backlog_unblocklua()",
        "description": "Undisable LUA code execution in the backlog."
    },
    // Renderer
    "GetGameSpeed()": {
        "prefix": "GetGameSpeed",
        "body": "GetGameSpeed()",
        "description": "Float result -- returns game speed."
    },
    "SetGameSpeed(float speed)": {
        "prefix": "SetGameSpeed",
        "body": "SetGameSpeed(${1})",
        "description": "Sets the game speed."
    },
    "application.GetCanvas().GetLogicalWidth()": {
        "prefix": "application.GetCanvas().GetLogicalWidth",
        "body": "application.GetCanvas().GetLogicalWidth()",
        "description": "Float result -- returns the screen width."
    },
    "application.GetCanvas().GetLogicalHeight()": {
        "prefix": "application.GetCanvas().GetLogicalHeight",
        "body": "application.GetCanvas().GetLogicalHeight()",
        "description": "Float result -- returns the screen height."
    },
    "HairParticleSettings(opt int lod0, opt int lod1, opt int lod2)": {
        "prefix": "HairParticleSettings",
        "body": "HairParticleSettings(${1})",
        "description": "Settings for hair particle in lod0, lod1 and lod2. [Undocumented assumed result, might need testing]"
    },
    "SetShadowProps2D(int resolution)": {
        "prefix": "SetShadowProps2D",
        "body": "SetShadowProps2D(${1})",
        "description": "Set 2d shadow resolution. [Undocumented assumed result, might need testing]"
    },
    "SetShadowPropsCube(int resolution)": {
        "prefix": "SetShadowPropsCube",
        "body": "SetShadowPropsCube(${1})",
        "description": "Set shadow resolution for cube. [Undocumented assumed result, might need testing]"
    },
    "SetDebugPartitionTreeEnabled(bool enabled)": {
        "prefix": "SetDebugPartitionTreeEnabled",
        "body": "SetDebugPartitionTreeEnabled(${1})",
        "description": "Sets debugging for partition tree enabled. [Undocumented assumed result, might need testing]"
    },
    "SetDebugBonesEnabled(bool enabled)": {
        "prefix": "SetDebugBonesEnabled",
        "body": "SetDebugBonesEnabled(${1})",
        "description": "Sets debugging for bones enabled. [Undocumented assumed result, might need testing]"
    },
    "SetDebugEmittersEnabled(bool enabled)": {
        "prefix": "SetDebugEmittersEnabled",
        "body": "SetDebugEmittersEnabled(${1})",
        "description": "Sets debugging for emitters enabled. [Undocumented assumed result, might need testing]"
    },
    "SetDebugEnvProbesEnabled(bool enabled)": {
        "prefix": "SetDebugEnvProbesEnabled",
        "body": "SetDebugEnvProbesEnabled(${1})",
        "description": "Sets debugging for enviromental probes enabled. [Undocumented assumed result, might need testing]"
    },
    "SetDebugForceFieldsEnabled(bool enabled)": {
        "prefix": "SetDebugForceFieldsEnabled",
        "body": "SetDebugForceFieldsEnabled(${1})",
        "description": "Sets debugging for force fields enabled. [Undocumented assumed result, might need testing]"
    },
    "SetDebugCamerasEnabled(bool value)": {
        "prefix": "SetDebugCamerasEnabled",
        "body": "SetDebugCamerasEnabled(${1})",
        "description": "Sets debugging for cameras enabled. [Undocumented assumed result, might need testing]"
    },
    "SetDebugCollidersEnabled(bool value)": {
        "prefix": "SetDebugCollidersEnabled",
        "body": "SetDebugCollidersEnabled(${1})",
        "description": "Sets debugging for colliders enabled. [Undocumented assumed result, might need testing]"
    },
    "SetGridHelperEnabled(bool value)": {
        "prefix": "SetGridHelperEnabled",
        "body": "SetGridHelperEnabled(${1})",
        "description": "Sets the grid helper enabled. [Undocumented assumed result, might need testing]"
    },
    "SetDDGIDebugEnabled(bool value)": {
        "prefix": "SetDDGIDebugEnabled",
        "body": "SetDDGIDebugEnabled(${1})",
        "description": "Sets debugging for DDGI enabled. [Undocumented assumed result, might need testing]"
    },
    "SetVSyncEnabled(opt bool enabled)": {
        "prefix": "SetVSyncEnabled",
        "body": "SetVSyncEnabled(${1})",
        "description": "Sets VSync/Virtual synchronization enabled. [Undocumented assumed result, might need testing]"
    },
    "SetOcclusionCullingEnabled(bool enabled)": {
        "prefix": "SetOcclusionCullingEnabled",
        "body": "SetOcclusionCullingEnabled(${1})",
        "description": "Sets Global Occlusion Culling enabled. [Undocumented assumed result, might need testing]"
    },
    "SetMeshShaderAllowed(bool enabled)": {
        "prefix": "SetMeshShaderAllowed",
        "body": "SetMeshShaderAllowed(${1})",
        "description": "Sets Mesh Shaders allowed. [Undocumented assumed result, might need testing]"
    },
    "SetMeshletOcclusionCullingEnabled(bool value)": {
        "prefix": "SetMeshletOcclusionCullingEnabled",
        "body": "SetMeshletOcclusionCullingEnabled(${1})",
        "description": "Allows meshes to receive occlusion culling. [Undocumented assumed result, might need testing]"
    },
    "DrawLine(Vector origin, end, opt Vector color, opt bool depth = false)": {
        "prefix": "DrawLine",
        "body": "DrawLine(${1})",
        "description": "Draws a line from origin to end you can also specify optional color and optional depth enabled. [Undocumented assumed result, might need testing]"
    },
    "DrawPoint(Vector origin, opt float size, opt Vector color, opt bool depth = false)": {
        "prefix": "DrawPoint",
        "body": "DrawPoint(${1})",
        "description": "Draws a point in the specified origin you can also specify optional size, optional color and optional depth enabled. [Undocumented assumed result, might need testing]"
    },
    "DrawBox(Matrix boxMatrix, opt Vector color, opt bool depth = true)": {
        "prefix": "DrawBox",
        "body": "DrawBox(${1})",
        "description": "Draws a box you need a matrix for it, you can also specify optional color and optional depth enabled. [Undocumented assumed result, might need testing]"
    },
    "DrawSphere(Sphere sphere, opt Vector color, opt bool depth = true)": {
        "prefix": "DrawSphere",
        "body": "DrawSphere(${1})",
        "description": "Draws a sphere you need a sphere for it, you can also specify optional color and optional depth. [Undocumented assumed result, might need testing]"
    },
    "DrawDebugText(string text, opt Vector position, opt Vector color, opt float scaling, opt int flags)": {
        "prefix": "DrawDebugText",
        "body": "DrawDebugText(${1})",
        "description": "Draws a text in the specified optional position you can also specify optional color, optional scaling and optional flags. DrawDebugText flags, these can be combined with binary OR operator: [outer]DEBUG_TEXT_DEPTH_TEST -- text can be occluded by geometry [outer]DEBUG_TEXT_CAMERA_FACING -- text will be rotated to face the camera [outer]DEBUG_TEXT_CAMERA_SCALING -- text will be always the same size, independent of distance to camera. [Needs testing]"
    },
    "DrawVoxelGrid(VoxelGrid voxelgrid)": {
        "prefix": "DrawVoxelGrid",
        "body": "DrawVoxelGrid(${1})",
        "description": "Draws the voxel grid in the debug rendering phase. VoxelGrid object must not be destroyed until then! [Needs testing]"
    },
    "DrawPathQuery(PathQuery pathquery)": {
        "prefix": "DrawPathQuery",
        "body": "DrawPathQuery(${1})",
        "description": "Draws the path query in the debug rendering phase. PathQuery object must not be destroyed until then! [Needs testing]"
    },
    "DrawTrail(TrailRenderer trail)": {
        "prefix": "DrawTrail",
        "body": "DrawTrail(${1})",
        "description": "Draws the trail in the debug rendering phase. TrailRenderer object must not be destroyed until then! [Needs testing]"
    },
    "PaintIntoTexture(PaintTextureParams params)": {
        "prefix": "PaintIntoTexture",
        "body": "PaintIntoTexture(${1})",
        "description": "Allows to paint into textures with params or ¿Paint textures into the world?. [Undocumented assumed result, might need testing]"
    },
    "CreatePaintableTexture(int width, height, opt int mips = 0, opt Vector initialColor = Vector())": {
        "prefix": "CreatePaintableTexture",
        "body": "CreatePaintableTexture(${1})",
        "description": "Creates a texture that can be used for destination of PaintIntoTexture() you need to specify width, height, optional mips and optional initialColor. [Needs testing]"
    },
    "PutWaterRipple(Vector position)": {
        "prefix": "PutWaterRipple",
        "body": "PutWaterRipple(${1})",
        "description": "Put down a water ripple with default embedded asset in the specified position you can also specify a string imagename at the start before position. [Needs testing]"
    },
    "PutWaterRipple(string imagename, Vector position)": {
        "prefix": "PutWaterRipple",
        "body": "PutWaterRipple(${1})",
        "description": "Put down a water ripple with default embedded asset in the specified position you can also specify a string image. [Needs testing]"
    },
    "ClearWorld(opt Scene scene)": {
        "prefix": "ClearWorld",
        "body": "ClearWorld(${1})",
        "description": "Clears the scene and the associated renderer resources. If parameter is not specified, it will clear the global scene. [Needs testing]"
    },
    "ReloadShaders()": {
        "prefix": "ReloadShaders",
        "body": "ReloadShaders()",
        "description": "The engine attempts to reload the shaders. [Needs testing]"
    },
    // Paint Texture Params
    "[constructor]PaintTextureParams": {
        "prefix": "PaintTextureParams",
        "body": "PaintTextureParams",
        "description": "Params for paint texture used in a constructor. [Undocumented assumed result, might need testing]"
    },
    "SetEditTexture(Texture tex)": {
        "prefix": "SetEditTexture",
        "body": "SetEditTexture(${1})",
        "description": "Sets edition texture for PaintTextureParams, requires a texture as argument. [Undocumented assumed result, might need testing]"
    },
    "SetBrushTexture(Texture tex)": {
        "prefix": "SetBrushTexture",
        "body": "SetBrushTexture(${1})",
        "description": "Sets the texture for the paint brush tool, requires a texture as argument. [Undocumented assumed result, might need testing]"
    },
    "SetRevealTexture(Texture tex)": {
        "prefix": "SetRevealTexture",
        "body": "SetRevealTexture(${1})",
        "description": "Sets reveal texture, requires a texture as argument. [Undocumented assumed result, might need testing]"
    },
    "SetBrushColor(Vector value)": {
        "prefix": "SetBrushColor",
        "body": "SetBrushColor(${1})",
        "description": "Sets the color for the brush tool, requires a vector color value as argument. [Undocumented assumed result, might need testing]"
    },
    "SetCenterPixel(Vector value)": {
        "prefix": "SetCenterPixel",
        "body": "SetCenterPixel(${1})",
        "description": "Sets the center pixel ¿maybe of the brush tool?, requires a vector value as argument. [Undocumented assumed result, might need testing]"
    },
    "SetBrushRadius(int value)": {
        "prefix": "SetBrushRadius",
        "body": "SetBrushRadius(${1})",
        "description": "Sets the paint brush size, requires an int value as argument. [Undocumented assumed result, might need testing]"
    },
    "SetBrushAmount(float value)": {
        "prefix": "SetBrushAmount",
        "body": "SetBrushAmount(${1})",
        "description": "Sets the amount that the brush can paint, requires a float value as argument. [Undocumented assumed result, might need testing]"
    },
    "SetBrushSmoothness(float value)": {
        "prefix": "SetBrushSmoothness",
        "body": "SetBrushSmoothness(${1})",
        "description": "Sets how smooth the brush is, requires a float value as argument. [Undocumented assumed result, might need testing]"
    },
    "SetBrushRotation(float value)": {
        "prefix": "SetBrushRotation",
        "body": "SetBrushRotation(${1})",
        "description": "Sets the rotation of the brush, requires a float value as argument. [Undocumented assumed result, might need testing]"
    },
    "SetBrushShape(int value)": {
        "prefix": "SetBrushShape",
        "body": "SetBrushShape(${1})",
        "description": "Sets the shape of the brush: 0 = circle, 1 = rectangle, requires an int value as argument. [Needs testing]"
    },
    // Paint Decal Params
    "[constructor]PaintDecalParams": {
        "prefix": "PaintDecalParams",
        "body": "PaintDecalParams",
        "description": "Params for paint decal used in a constructor. [Undocumented assumed result, might need testing]"
    },
    "SetInTexture(Texture tex)": {
        "prefix": "SetInTexture",
        "body": "SetInTexture(${1})",
        "description": "Set source texture (decal tex) for decals, requires a texture as argument. [Needs testing]"
    },
    "SetOutTexture(Texture tex)": {
        "prefix": "SetOutTexture",
        "body": "SetOutTexture(${1})",
        "description": "Set destination texture (object tex) for decals, requires a texture as argument. [Needs testing]"
    },
    "SetMatrix(Matrix mat)": {
        "prefix": "SetMatrix",
        "body": "SetMatrix(${1})",
        "description": "Set decal matrix in world space, requires a matrix as argument. [Needs testing]"
    },
    "SetObject(Entity entity)": {
        "prefix": "SetObject",
        "body": "SetObject(${1})",
        "description": "Set object entity, the positions and UVs will be taken from this. [Needs testing]"
    },
    "SetSlopeBlendPower(float power)": {
        "prefix": "SetSlopeBlendPower",
        "body": "SetSlopeBlendPower(${1})",
        "description": "Adjust fading of the decal based on slope of surface compared to decal projection (default: 0, no slope blend). [Needs testing]"
    },
    // Sprite
    "[constructor]Sprite(opt string texture, opt string maskTexture)": {
        "prefix": "Sprite",
        "body": "Sprite(${1})",
        "description": "Makes a new or use an sprite using texture and maskTexture that will render in the screen. [Undocumented assumed result, might need testing]"
    },
    "SetParams(ImageParams effects)": {
        "prefix": "SetParams",
        "body": "SetParams(${1})",
        "description": "Set the params for the sprite made using [constructor]Sprite(opt string texture, opt string maskTexture) you can apply effects with ImageParams. [Undocumented assumed result, might need testing]"
    },
    "GetParams()": {
        "prefix": "GetParams",
        "body": "GetParams()",
        "description": "Returns ImageParams result of the sprite. [Undocumented assumed result, might need testing]"
    },
    "SetAnim(SpriteAnim anim)": {
        "prefix": "SetAnim",
        "body": "SetAnim(${1})",
        "description": "Sets an animation to the sprite using SpriteAnim as argument. [Undocumented assumed result, might need testing]"
    },
    "GetAnim()": {
        "prefix": "GetAnim",
        "body": "GetAnim()",
        "description": "Returns SpriteAnim result from the sprite. [Undocumented assumed result, might need testing]"
    },
    "SetTexture(Texture texture)": {
        "prefix": "SetTexture",
        "body": "SetTexture(${1})",
        "description": "Sets a texture to the sprite. [Undocumented assumed result, might need testing]"
    },
    "GetTexture()": {
        "prefix": "GetTexture",
        "body": "GetTexture()",
        "description": "Returns the texture of the sprite. [Undocumented assumed result, might need testing]"
    },
    "SetMaskTexture(Texture texture)": {
        "prefix": "SetMaskTexture",
        "body": "SetMaskTexture(${1})",
        "description": "Sets a mask texture to the sprite. [Undocumented assumed result, might need testing]"
    },
    "GetMaskTexture()": {
        "prefix": "GetMaskTexture",
        "body": "GetMaskTexture()",
        "description": "Returns the mask texture of the sprite. [Undocumented assumed result, might need testing]"
    },
    "SetBackgroundTexture(Texture texture)": {
        "prefix": "SetBackgroundTexture",
        "body": "SetBackgroundTexture(${1})",
        "description": "¿Sets the background texture of the sprite?. [Undocumented assumed result, might need testing]"
    },
    "GetBackgroundTexture()": {
        "prefix": "GetBackgroundTexture",
        "body": "GetBackgroundTexture()",
        "description": "¿Returns the background texture of the sprite?. [Undocumented assumed result, might need testing]"
    },
    "SetHidden(bool value)": {
        "prefix": "SetHidden",
        "body": "SetHidden(${1})",
        "description": "¿Sets if the sprite is renderer or not?. [Undocumented assumed result, might need testing]"
    },
    "IsHidden()": {
        "prefix": "IsHidden",
        "body": "IsHidden()",
        "description": "¿Returns if the sprite is Hidden or not?. [Undocumented assumed result, might need testing]"
    },
    // Image Params
    "[constructor]ImageParams(opt float width, opt float height)": {
        "prefix": "ImageParams",
        "body": "ImageParams(${1})",
        "description": "Specify Sprite properties, like position, size, etc... [Undocumented assumed result, might need testing]"
    },
    "[constructor]ImageParams(float posX, float posY, float width, opt float height)": {
        "prefix": "ImageParams",
        "body": "ImageParams(${1})",
        "description": "Same as ImageParams but you can specify posX and posY. [Undocumented assumed result, might need testing]"
    },
    "GetPos()": {
        "prefix": "GetPos",
        "body": "GetPos()",
        "description": "¿Returns a Vector result of the position from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "GetSize()": {
        "prefix": "GetSize",
        "body": "GetSize()",
        "description": "¿Returns a Vector result of the size from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "GetPivot()": {
        "prefix": "GetPivot",
        "body": "GetPivot()",
        "description": "¿Returns a Vector result of the pivot from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "GetOpacity()": {
        "prefix": "GetOpacity",
        "body": "GetOpacity()",
        "description": "¿Returns a Float result of the opacity from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "GetFade()": {
        "prefix": "GetFade",
        "body": "GetFade()",
        "description": "¿Returns a Float result of the fading from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "GetRotation()": {
        "prefix": "GetRotation",
        "body": "GetRotation()",
        "description": "¿Returns a Float result of the rotation from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "GetMipLevel()": {
        "prefix": "GetMipLevel",
        "body": "GetMipLevel()",
        "description": "¿Returns a Float result of the mip level from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "GetTexOffset()": {
        "prefix": "GetTexOffset",
        "body": "GetTexOffset()",
        "description": "¿Returns a Vector result of the texture offset from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "GetTexOffset2()": {
        "prefix": "GetTexOffset2",
        "body": "GetTexOffset2()",
        "description": "¿Returns a Vector result of the texture offset with only 2 from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "GetBorderSoften()": {
        "prefix": "GetBorderSoften",
        "body": "GetBorderSoften()",
        "description": "¿Returns a Float result with how smooth the border is from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "GetDrawRect()": {
        "prefix": "GetDrawRect",
        "body": "GetDrawRect()",
        "description": "¿Returns a Vector result with the Rect from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "GetDrawRect2()": {
        "prefix": "GetDrawRect2",
        "body": "GetDrawRect2()",
        "description": "¿Returns a Vector result with the Rect but only 2 from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "IsDrawRectEnabled()": {
        "prefix": "IsDrawRectEnabled",
        "body": "IsDrawRectEnabled()",
        "description": "¿Returns a Bool result checking if the Rect is enabled from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "IsDrawRect2Enabled()": {
        "prefix": "IsDrawRect2Enabled",
        "body": "IsDrawRect2Enabled()",
        "description": "¿Returns a Bool result checking if the Rect is enabled but only 2 from the sprite?. [Undocumented assumed result, might need testing]"
    },
    "IsMirrorEnabled()": {
        "prefix": "IsMirrorEnabled",
        "body": "IsMirrorEnabled()",
        "description": "¿Returns a Bool result checking if mirroring is enabled?. [Undocumented assumed result, might need testing]"
    },
    "IsBackgroundEnabled()": {
        "prefix": "IsBackgroundEnabled",
        "body": "IsBackgroundEnabled()",
        "description": "¿Returns a Bool result checking if background is enabled?. [Undocumented assumed result, might need testing]"
    },
    "IsDistortionMaskEnabled()": {
        "prefix": "IsDistortionMaskEnabled",
        "body": "IsDistortionMaskEnabled()",
        "description": "¿Returns a Bool result checking if distortion mask is enabled?. [Undocumented assumed result, might need testing]"
    },
    "SetPos(Vector pos)": {
        "prefix": "SetPos",
        "body": "SetPos(${1})",
        "description": "¿Sets the position of the sprite with a Vector?. [Undocumented assumed result, might need testing]"
    },
    "SetSize(Vector size)": {
        "prefix": "SetSize",
        "body": "SetSize(${1})",
        "description": "¿Sets the size of the sprite with a Vector?. [Undocumented assumed result, might need testing]"
    },
    "SetPivot(Vector value)": {
        "prefix": "SetPivot",
        "body": "SetPivot(${1})",
        "description": "¿Sets the pivot of the sprite with a Vector?. [Undocumented assumed result, might need testing]"
    },
    "SetColor(Vector value)": {
        "prefix": "SetColor",
        "body": "SetColor(${1})",
        "description": "¿Sets the color of the sprite with a Vector?. [Undocumented assumed result, might need testing]"
    },
    "SetOpacity(float opacity)": {
        "prefix": "SetOpacity",
        "body": "SetOpacity(${1})",
        "description": "¿Sets the opacity of the sprite with a Float?. [Undocumented assumed result, might need testing]"
    },
    "SetFade(float fade)": {
        "prefix": "SetFade",
        "body": "SetFade(${1})",
        "description": "¿Sets fading of the sprite with a Float?. [Undocumented assumed result, might need testing]"
    },
    "SetStencil(int stencilMode, stencilRef)": {
        "prefix": "SetStencil",
        "body": "SetStencil(${1})",
        "description": "¿Sets stencil with an Int and reference?. [Undocumented assumed result, might need testing]"
    },
    "SetStencilRefMode(int stencilrefmode)": {
        "prefix": "SetStencilRefMode",
        "body": "SetStencilRefMode(${1})",
        "description": "¿Sets stencil reference mode with an Int?. [Undocumented assumed result, might need testing]"
    },
    "SetBlendMode(int blendMode)": {
        "prefix": "SetBlendMode",
        "body": "SetBlendMode(${1})",
        "description": "¿Sets blend mode for the sprite with an Int?. [Undocumented assumed result, might need testing]"
    },
    "SetQuality(int quality)": {
        "prefix": "SetQuality",
        "body": "SetQuality(${1})",
        "description": "¿Sets the graphics quality with an Int?. [Undocumented assumed result, might need testing]"
    },
    "SetSampleMode(int sampleMode)": {
        "prefix": "SetSampleMode",
        "body": "SetSampleMode(${1})",
        "description": "¿Sets the sample mode with an Int?. [Undocumented assumed result, might need testing]"
    },
    "SetRotation(float rotation)": {
        "prefix": "SetRotation",
        "body": "SetRotation(${1})",
        "description": "¿Sets the rotation for the sprite with a Float?. [Undocumented assumed result, might need testing]"
    },
    "SetMipLevel(float mipLevel)": {
        "prefix": "SetMipLevel",
        "body": "SetMipLevel(${1})",
        "description": "¿Sets the mip level with a Float?. [Undocumented assumed result, might need testing]"
    },
    "SetTexOffset()": {
        "prefix": "SetTexOffset",
        "body": "SetTexOffset(${1})",
        "description": "¿Sets texture offset? ¿But it might require some argument?. [Undocumented assumed result, might need testing]"
    },
    "SetTexOffset2()": {
        "prefix": "SetTexOffset2",
        "body": "SetTexOffset2(${1})",
        "description": "¿Sets texture offset for only 2? ¿But it might require some argument?. [Undocumented assumed result, might need testing]"
    },
    "SetBorderSoften(float alpha)": {
        "prefix": "SetBorderSoften",
        "body": "SetBorderSoften(${1})",
        "description": "¿Sets how smooth the sprite border is with a Float?. [Undocumented assumed result, might need testing]"
    },
    "EnableDrawRect(Vector value)": {
        "prefix": "EnableDrawRect",
        "body": "EnableDrawRect(${1})",
        "description": "¿Enables drawing a rect for the sprite with a Vector?. [Undocumented assumed result, might need testing]"
    },
    "EnableDrawRect2(Vector value)": {
        "prefix": "EnableDrawRect2",
        "body": "EnableDrawRect2(${1})",
        "description": "¿Enables drawing a rect only 2 for the sprite with a Vector?. [Undocumented assumed result, might need testing]"
    },
    "DisableDrawRect()": {
        "prefix": "DisableDrawRect",
        "body": "DisableDrawRect()",
        "description": "¿Disables drawing a rect maybe globally or for a sprite?. [Undocumented assumed result, might need testing]"
    },
    "DisableDrawRect2()": {
        "prefix": "DisableDrawRect2",
        "body": "DisableDrawRect2()",
        "description": "¿Disables drawing a rect only 2 maybe globally or for a sprite?. [Undocumented assumed result, might need testing]"
    },
    "EnableMirror()": {
        "prefix": "EnableMirror",
        "body": "EnableMirror()",
        "description": "¿Enables mirroring in the engine?. [Undocumented assumed result, might need testing]"
    },
    "DisableMirror()": {
        "prefix": "DisableMirror",
        "body": "DisableMirror()",
        "description": "¿Disables mirroring in the engine?. [Undocumented assumed result, might need testing]"
    },
    "EnableBackground()": {
        "prefix": "EnableBackground",
        "body": "EnableBackground()",
        "description": "¿Enables background for the engine or maybe a sprite?. [Undocumented assumed result, might need testing]"
    },
    "DisableBackground()": {
        "prefix": "DisableBackground",
        "body": "DisableBackground()",
        "description": "¿Disables background for the engine or maybe a sprite?. [Undocumented assumed result, might need testing]"
    },
    "EnableDistortionMask()": {
        "prefix": "EnableDistortionMask",
        "body": "EnableDistortionMask()",
        "description": "¿Enables distortion mask for the sprite?. [Undocumented assumed result, might need testing]"
    },
    "DisableDistortionMask()": {
        "prefix": "DisableDistortionMask",
        "body": "DisableDistortionMask()",
        "description": "¿Disables distortion mask for the sprite?. [Undocumented assumed result, might need testing]"
    },
    "SetMaskAlphaRange(float start, end)": {
        "prefix": "SetMaskAlphaRange",
        "body": "SetMaskAlphaRange(${1})",
        "description": "¿Sets mask alpha range maybe globally or for a sprite requires float start and end?. [Undocumented assumed result, might need testing]"
    },
    "GetMaskAlphaRange()": {
        "prefix": "GetMaskAlphaRange",
        "body": "GetMaskAlphaRange()",
        "description": "¿Returns mask alpha range float start and end?. [Undocumented assumed result, might need testing]"
    },
    "[outer]STENCILMODE_DISABLED : int": {
        "prefix": "STENCILMODE_DISABLED",
        "body": "STENCILMODE_DISABLED",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]STENCILMODE_EQUAL : int": {
        "prefix": "STENCILMODE_EQUAL",
        "body": "STENCILMODE_EQUAL",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]STENCILMODE_LESS : int": {
        "prefix": "STENCILMODE_LESS",
        "body": "STENCILMODE_LESS",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]STENCILMODE_LESSEQUAL : int": {
        "prefix": "STENCILMODE_LESSEQUAL",
        "body": "STENCILMODE_LESSEQUAL",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]STENCILMODE_GREATER : int": {
        "prefix": "STENCILMODE_GREATER",
        "body": "STENCILMODE_GREATER",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]STENCILMODE_GREATEREQUAL : int": {
        "prefix": "STENCILMODE_GREATEREQUAL",
        "body": "STENCILMODE_GREATEREQUAL",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]STENCILMODE_NOT : int": {
        "prefix": "STENCILMODE_NOT",
        "body": "STENCILMODE_NOT",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]STENCILREFMODE_ENGINE : int": {
        "prefix": "STENCILREFMODE_ENGINE",
        "body": "STENCILREFMODE_ENGINE",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]STENCILREFMODE_USER : int": {
        "prefix": "STENCILREFMODE_USER",
        "body": "STENCILREFMODE_USER",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]STENCILREFMODE_ALL : int": {
        "prefix": "STENCILREFMODE_ALL",
        "body": "STENCILREFMODE_ALL",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]SAMPLEMODE_CLAMP : int": {
        "prefix": "SAMPLEMODE_CLAMP",
        "body": "SAMPLEMODE_CLAMP",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]SAMPLEMODE_WRAP : int": {
        "prefix": "SAMPLEMODE_WRAP",
        "body": "SAMPLEMODE_WRAP",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]SAMPLEMODE_MIRROR : int": {
        "prefix": "SAMPLEMODE_MIRROR",
        "body": "SAMPLEMODE_MIRROR",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]QUALITY_NEAREST : int": {
        "prefix": "QUALITY_NEAREST",
        "body": "QUALITY_NEAREST",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]QUALITY_LINEAR : int": {
        "prefix": "QUALITY_LINEAR",
        "body": "QUALITY_LINEAR",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]QUALITY_ANISOTROPIC : int": {
        "prefix": "QUALITY_ANISOTROPIC",
        "body": "QUALITY_ANISOTROPIC",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]QUALITY_BICUBIC : int": {
        "prefix": "QUALITY_BICUBIC",
        "body": "QUALITY_BICUBIC",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]BLENDMODE_OPAQUE : int": {
        "prefix": "BLENDMODE_OPAQUE",
        "body": "BLENDMODE_OPAQUE",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]BLENDMODE_ALPHA : int": {
        "prefix": "BLENDMODE_ALPHA",
        "body": "BLENDMODE_ALPHA",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]BLENDMODE_PREMULTIPLIED : int": {
        "prefix": "BLENDMODE_PREMULTIPLIED",
        "body": "BLENDMODE_PREMULTIPLIED",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
    "[outer]BLENDMODE_ADDITIVE : int": {
        "prefix": "BLENDMODE_ADDITIVE",
        "body": "BLENDMODE_ADDITIVE",
        "description": "Outer - The method or value is in the global scope, so not a method of any objects. [Undocumented assumed result, might need testing]"
    },
}